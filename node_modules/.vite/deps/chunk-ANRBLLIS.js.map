{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTextField/VTextField.tsx"],
  "sourcesContent": ["// Styles\nimport './VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps, VField } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { cloneVNode, computed, nextTick, ref } from 'vue'\nimport { callEvent, filterInputAttrs, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\ntype EventProp<T = (...args: any[]) => any> = T | T[]\nconst EventProp = [Function, Array] as PropType<EventProp>\n\nexport const makeVTextFieldProps = propsFactory({\n  autofocus: Boolean,\n  counter: [Boolean, Number, String] as PropType<true | number | string>,\n  counterValue: Function as PropType<(value: any) => number>,\n  hint: String,\n  persistentHint: Boolean,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  suffix: String,\n  type: {\n    type: String,\n    default: 'text',\n  },\n\n  ...makeVInputProps(),\n  ...makeVFieldProps(),\n}, 'v-text-field')\n\nexport const VTextField = genericComponent<Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n  default: []\n}>>()({\n  name: 'VTextField',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: makeVTextFieldProps(),\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value ?? '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as unknown as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VField>()\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      activeTypes.includes(props.type) ||\n      props.persistentPlaceholder ||\n      isFocused.value\n    ))\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isFocused.value || props.persistentHint) ? props.hint : ''\n    })\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n\n      if (e.target === inputRef.value) return\n\n      onFocus()\n      e.preventDefault()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = null\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      const el = e.target as HTMLInputElement\n      model.value = el.value\n      if (['text', 'search', 'password', 'tel', 'url'].includes(props.type)) {\n        const caretPosition = [el.selectionStart, el.selectionEnd]\n        nextTick(() => {\n          el.selectionStart = caretPosition[0]\n          el.selectionEnd = caretPosition[1]\n        })\n      }\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          onClick:prepend={ props['onClick:prepend'] }\n          onClick:append={ props['onClick:append'] }\n          { ...rootAttrs }\n          { ...inputProps }\n          focused={ isFocused.value }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                onMousedown={ onControlMousedown }\n                onClick={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => {\n                    const inputNode = (\n                      <input\n                        ref={ inputRef }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        name={ props.name }\n                        placeholder={ props.placeholder }\n                        size={ 1 }\n                        type={ props.type }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n                    )\n\n                    return (\n                      <>\n                        { props.prefix && (\n                          <span class=\"v-text-field__prefix\">\n                            { props.prefix }\n                          </span>\n                        )}\n\n                        { slots.default ? (\n                          <div\n                            class={ fieldClass }\n                            data-no-activator=\"\"\n                          >\n                            { slots.default() }\n                            { inputNode }\n                          </div>\n                        ) : cloneVNode(inputNode, { class: fieldClass })}\n\n                        { props.suffix && (\n                          <span class=\"v-text-field__suffix\">\n                            { props.suffix }\n                          </span>\n                        )}\n                      </>\n                    )\n                  },\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n"],
  "mappings": "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",
  "names": ["activeTypes", "makeVTextFieldProps", "propsFactory", "autofocus", "Boolean", "counter", "Number", "String", "counterValue", "Function", "hint", "persistentHint", "prefix", "placeholder", "persistentPlaceholder", "persistentCounter", "suffix", "type", "default", "makeVInputProps", "makeVFieldProps", "VTextField", "genericComponent", "name", "directives", "Intersect", "inheritAttrs", "props", "emits", "e", "focused", "val", "setup", "_ref", "attrs", "emit", "slots", "model", "useProxiedModel", "isFocused", "focus", "blur", "useFocus", "computed", "value", "toString", "length", "max", "maxlength", "undefined", "onIntersect", "isIntersecting", "entries", "target", "vInputRef", "ref", "vFieldRef", "inputRef", "isActive", "activeTypes", "includes", "messages", "onFocus", "document", "activeElement", "onControlMousedown", "preventDefault", "onControlClick", "onClear", "stopPropagation", "nextTick", "callEvent", "onInput", "el", "caretPosition", "selectionStart", "selectionEnd", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "modelValue", "_", "inputProps", "filterInputProps", "fieldProps", "filterFieldProps", "_createVNode", "VInput", "_mergeProps", "$event", "variant", "_ref2", "id", "isDisabled", "isDirty", "isReadonly", "isValid", "VField", "dirty", "_ref3", "class", "fieldClass", "slotProps", "inputNode", "_withDirectives", "_resolveDirective", "handler", "once", "_Fragment", "cloneVNode", "VCounter", "forwardRefs"]
}
